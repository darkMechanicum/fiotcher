plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.4.21"
    id 'jacoco'
    id 'idea'
}

group 'com.tsarev'
version '3.0-SNAPSHOT'

repositories {
    mavenCentral()
    // For jacoco snapshot version.
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

// Snapshot jacoco to support 15 java.
jacoco {
    toolVersion = '0.8.7-SNAPSHOT'
}

// Additional example source set.
sourceSets {
    // Online example of parsing test results.
    example {
        kotlin {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }

    // Simplified version.
    simple {
        kotlin {

        }
    }

    // Tests for simplified version.
    simpleTest {
        kotlin {
            compileClasspath += simple.output
            runtimeClasspath += simple.output
        }
    }
}

// Convince IDEA that simpleTest is a test module.
idea {
    module {
        testSourceDirs += sourceSets.simpleTest.kotlin.srcDirs
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    exampleImplementation sourceSets.test.output
    exampleImplementation 'org.junit.platform:junit-platform-console-standalone:1.7.1'

    simpleTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    simpleTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    simpleTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            excludeTags("non-windows")
        }
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task runExample(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main('com.tsarev.fiotcher.LiveJunitReportsParseKt')
}

// Add simple module testing after main.
task simpleTests(type: Test) {
    useJUnitPlatform()
    description = 'Runs the simple module tests.'
    group = 'verification'
    testClassesDirs = sourceSets.simpleTest.output.classesDirs
    classpath = sourceSets.simpleTest.runtimeClasspath
    outputs.upToDateWhen { false }
}
check.dependsOn simpleTests